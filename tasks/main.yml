---
# tasks file for generate_satellite_report

- name: Assert that mandatory inputs are provided
  delegate_to: localhost
  assert:
    that:
      - satellite_host is defined
      - satellite_report_id is defined
      - satellite_username is defined
      - satellite_password is defined
    success_msg: Mandatory inputs have been provided.
    fail_msg: Mandatory inputs have NOT been provided.
  run_once: true

- name: Pause if requested
  delegate_to: localhost
  pause:
    minutes:  "{{ pause_mins | int }}"
  when: pause_before_report | bool
  run_once: true
  
- name: Start Dynamic Host filter block
  block:
    - name: Add first host to filter
      delegate_to: localhost
      set_fact:
        dynamic_host_filter: "{{ 'name == ' + inventory_hostname }}"
      run_once: true
      
    - name: Generate full host filter
      delegate_to: localhost
      set_fact:
        dynamic_host_filter: "{{ dynamic_host_filter + ' or name == ' + host }}"
      loop: "{{ ansible_play_hosts_all }}"
      loop_control:
        loop_var: host
        label: "{{ host }}"
      when: host not in dynamic_host_filter
      run_once: true

    - name: Set satellite host filter
      delegate_to: localhost
      set_fact:
        satellite_host_filter: "{{ dynamic_host_filter }}"
      run_once: true
  when: satellite_host_filter is not defined

- name: Run block of tasks on one host only
  block:
    - name: Print report input in json
      delegate_to: localhost
      debug:
        var: satellite_input_values|to_json

    - name: Generate report
      delegate_to: localhost
      uri:
        url:  "https://{{ satellite_host }}/api/report_templates/{{ satellite_report_id }}/generate"
        url_username:  "{{ satellite_username }}"
        url_password:  "{{ satellite_password }}"
        body:  "{{ satellite_input_values | default(none) or omit }}"
        body_format: json
        method: POST
        return_content: True
        force_basic_auth: True
        status_code: [200]
        validate_certs: "{{ satellite_validate_certs | default(none) or omit }}" 
      register: satellite_report_data

    - name: Save report data to temp file
      delegate_to: localhost
      copy:
        dest: /tmp/satellite_report_data.csv 
        content: "{{ satellite_report_data.content }}"

    - name: Import report csv data to json
      delegate_to: localhost
      read_csv:
        path:   /tmp/satellite_report_data.csv
      register: satellite_report_data

    - name: Save report data as pre_patch_install_report if variable is not already defined
      delegate_to: localhost
      set_stats:
        data: 
          pre_patch_install_report: "{{ satellite_report_data.list | lower }}"
          notification_automation_result: succeeded
          mail_subject: Linux Patching Report
          mail_subtype: html
          mail_port: 25
      when: pre_patch_install_report is not defined

    - name: Save report data as post_patch_install_report if pre_patch_install_report is defined
      delegate_to: localhost
      set_stats:
        data: 
          post_patch_install_report: "{{ satellite_report_data.list | lower }}"
      when: pre_patch_install_report is defined
  run_once: true
  